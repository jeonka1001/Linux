2020.06.15
- 

< if문 >
read -p "input integer : " 에서 받은 변수가 0인지 아닌지 판별하는 코드
- if 문의 조건식을 작성하는 방법
	if test "$REPLY" -eq 0 ; then
		//조건문이 참일경우
	elif test "$REPLY" -eq 1 ; then
		//조건문이 참일경우
	else
		//거짓일 경우
	fi
-------+-------+-------+-------+-------+-------+-------+-------+
	if [ "$REPLY" -eq 0 ] ; then
		//...
	elif [ "$REPLY" -eq 1 ] ; then
		//...
	else	
		//...
	fi
-------+-------+-------+-------+-------+-------+-------+-------+ 
test option )
-e : 파일이 존재 하는지 
-d : 파일이 존재하고 그 파일이 디렉터리인지.
-f : 파일이 존재하고 그 파일이 일반 파일인지.
-ef : 하드링크로 파일을 비교한다.
-ot : 파일 생성시간으로 비교한다.
-eq : 같다 / -ne : 다르다
-gt : 초과 / -lt : 미만
-ge : 이상 / -le : 이하
String) -n : 길이가 0이 아님 / -z : 길이가 0, 
String 은 =, != 가 가능하다.
-------+-------+-------+-------+-------+-------+-------+-------+
if문 내 실행문이 짧을 시 단축평가가 가능하다.
[1] || [2] --> 1이 참이면 2는 실행하지 않는다
[1] && [2] --> 1이 거짓이면 2는 실행하지 않는다.

==========================================================================================
==========================================================================================

< for 문 >
for 변수 in 범위 -->  ex) for var in 0 1 2 3 4 5 ; do 
				// ...
			done
-------+-------+-------+-------+-------+-------+-------+-------+
for 변수 in {범위} --> ex) for var in {1...9} ; do 
				//...
			done
-------+-------+-------+-------+-------+-------+-------+-------+
for filename in * ; do 
	echo "file name : $filename "  --> 파일 이름을 출력한다.
done
-------+-------+-------+-------+-------+-------+-------+-------+
- 만약 범위에 변수가 껴있을 경우 ? 
for cnt in $(seq $REPLY) ; do 
	//...
done
-------+-------+-------+-------+-------+-------+-------+-------+
- count type의 for문
for (( i = 2 ; i < 10 ; i ++ )) ; do
	//..
done

==========================================================================================
==========================================================================================

< case >
- 문법)
case 변수명 in 
	값|값) //..실행문 ;;  -->case (;; : break;)
	값) //..실행문 ;;  --> case
	*)  //..실행문 ;;  --> default
esac

==========================================================================================
==========================================================================================

<while 문>
- while [ 조건문(option) ] ; do
   //..
  done

- while (( 표현식 ))  ;do
   //..
  done

- while의 무한루프는 while true 로 한다.

==========================================================================================
==========================================================================================
< 표현식 >
- expr 표현식 : 단항 연산자에 대해 동작하지 않음.
- echo "$[표현식]" // ((표현식)) 
- [[]] : 정규 표현식의 경우 이중 대괄호를 쓴다. // 정규 표현식과 비교문은 =~ 로 한다.
- [] 안에는 option으로 비교하는 조건문을 쓴다.
==========================================================================================
==========================================================================================

< argument >
- 파일 컴파일 시 전달인자를 보낼 수 있다.
	- ex) ./test.sh 전달인자1 전달인자2 
	- 이 경우 해당 스크립트 파일의 전달인자는 "해당 파일명 + 사용자가 보낸 전달인자" 이다.
	- 따라서 전달인자를 전체 출력해보면
	  ./test,sh( 파일명 ) 전달인자1 전달인자2 가 출력된다
- 전달인자를 전체 출력하기 위해서는 총 전달인자가 몇개 들어간지 알아야 한다.
	- 전달된 인자의 개수는 # 이라는 변수에 저장된다.
	- 만약 ./test.sh 파일 내 echo "$#" 라는 명령문이 있을 시 
	  ./test.sh 전달인자1 전달인자2 의 결과값은 ? --> 2
	  파일명 + 사용자가 보낸 전달인자의 수는 ? --> 3개
	- 2가 출력되는 이유는 # 변수에는 전달인자 중 파일명은 카운트하지 않기 때문
- 해당 파일의 모든 전달인자는 배열과 비슷한 형태로 전달된다.
	- 따라서 0번방부터 사용자가 보낸 만큼 각 방에 하나씩 저장된다.
-------+-------+-------+-------+-------+-------+-------+-------+
	while [ -n $0 ] ; do 
		echo "$cnt"
		shift
	done
-------+-------+-------+-------+-------+-------+-------+-------+
	for i in $# ; do
		echo "$i"
	done

==========================================================================================
==========================================================================================
